import {
  Oe,
  Q,
  Z,
  ee,
  k
} from "./chunk-QWUAECJV.js";
import {
  require_lodash,
  require_lodash2
} from "./chunk-6TR2FMUR.js";
import {
  createSSRApp,
  defineComponent,
  h,
  isReactive,
  markRaw,
  reactive,
  ref,
  shallowRef,
  watch
} from "./chunk-3NMN3MUW.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/@inertiajs/vue3/dist/index.esm.js
var import_lodash = __toESM(require_lodash());
var import_lodash2 = __toESM(require_lodash());
var import_lodash3 = __toESM(require_lodash2());
var import_lodash4 = __toESM(require_lodash());
var L = { created() {
  if (!this.$options.remember)
    return;
  Array.isArray(this.$options.remember) && (this.$options.remember = { data: this.$options.remember }), typeof this.$options.remember == "string" && (this.$options.remember = { data: [this.$options.remember] }), typeof this.$options.remember.data == "string" && (this.$options.remember = { data: [this.$options.remember.data] });
  let e = this.$options.remember.key instanceof Function ? this.$options.remember.key.call(this) : this.$options.remember.key, o = Oe.restore(e), n = this.$options.remember.data.filter((t) => !(this[t] !== null && typeof this[t] == "object" && this[t].__rememberable === false)), l = (t) => this[t] !== null && typeof this[t] == "object" && typeof this[t].__remember == "function" && typeof this[t].__restore == "function";
  n.forEach((t) => {
    this[t] !== void 0 && o !== void 0 && o[t] !== void 0 && (l(t) ? this[t].__restore(o[t]) : this[t] = o[t]), this.$watch(t, () => {
      Oe.remember(n.reduce((p, a) => ({ ...p, [a]: (0, import_lodash.default)(l(a) ? this[a].__remember() : this[a]) }), {}), e);
    }, { immediate: true, deep: true });
  });
} };
var _ = L;
function v(e, o) {
  let n = typeof e == "string" ? e : null, l = typeof e == "object" ? e : o, t = n ? Oe.restore(n) : null, p = (0, import_lodash2.default)(l), a = null, m = null, d = (r) => r, h2 = reactive({ ...t ? t.data : l, isDirty: false, errors: t ? t.errors : {}, hasErrors: false, processing: false, progress: null, wasSuccessful: false, recentlySuccessful: false, data() {
    return Object.keys(l).reduce((r, i) => (r[i] = this[i], r), {});
  }, transform(r) {
    return d = r, this;
  }, defaults(r, i) {
    return typeof r > "u" ? p = this.data() : p = Object.assign({}, (0, import_lodash2.default)(p), typeof r == "string" ? { [r]: i } : r), this;
  }, reset(...r) {
    let i = (0, import_lodash2.default)(p);
    return r.length === 0 ? Object.assign(this, i) : Object.assign(this, Object.keys(i).filter((s) => r.includes(s)).reduce((s, f) => (s[f] = i[f], s), {})), this;
  }, setError(r, i) {
    return Object.assign(this.errors, typeof r == "string" ? { [r]: i } : r), this.hasErrors = Object.keys(this.errors).length > 0, this;
  }, clearErrors(...r) {
    return this.errors = Object.keys(this.errors).reduce((i, s) => ({ ...i, ...r.length > 0 && !r.includes(s) ? { [s]: this.errors[s] } : {} }), {}), this.hasErrors = Object.keys(this.errors).length > 0, this;
  }, submit(r, i, s = {}) {
    let f = d(this.data()), g = { ...s, onCancelToken: (u) => {
      if (a = u, s.onCancelToken)
        return s.onCancelToken(u);
    }, onBefore: (u) => {
      if (this.wasSuccessful = false, this.recentlySuccessful = false, clearTimeout(m), s.onBefore)
        return s.onBefore(u);
    }, onStart: (u) => {
      if (this.processing = true, s.onStart)
        return s.onStart(u);
    }, onProgress: (u) => {
      if (this.progress = u, s.onProgress)
        return s.onProgress(u);
    }, onSuccess: async (u) => {
      this.processing = false, this.progress = null, this.clearErrors(), this.wasSuccessful = true, this.recentlySuccessful = true, m = setTimeout(() => this.recentlySuccessful = false, 2e3);
      let D = s.onSuccess ? await s.onSuccess(u) : null;
      return p = (0, import_lodash2.default)(this.data()), this.isDirty = false, D;
    }, onError: (u) => {
      if (this.processing = false, this.progress = null, this.clearErrors().setError(u), s.onError)
        return s.onError(u);
    }, onCancel: () => {
      if (this.processing = false, this.progress = null, s.onCancel)
        return s.onCancel();
    }, onFinish: (u) => {
      if (this.processing = false, this.progress = null, a = null, s.onFinish)
        return s.onFinish(u);
    } };
    r === "delete" ? Oe.delete(i, { ...g, data: f }) : Oe[r](i, f, g);
  }, get(r, i) {
    this.submit("get", r, i);
  }, post(r, i) {
    this.submit("post", r, i);
  }, put(r, i) {
    this.submit("put", r, i);
  }, patch(r, i) {
    this.submit("patch", r, i);
  }, delete(r, i) {
    this.submit("delete", r, i);
  }, cancel() {
    a && a.cancel();
  }, __rememberable: n === null, __remember() {
    return { data: this.data(), errors: this.errors };
  }, __restore(r) {
    Object.assign(this, r.data), this.setError(r.errors);
  } });
  return watch(h2, (r) => {
    h2.isDirty = !(0, import_lodash3.default)(h2.data(), p), n && Oe.remember((0, import_lodash2.default)(r.__remember()), n);
  }, { immediate: true, deep: true }), h2;
}
var c = ref(null);
var b = ref(null);
var C = shallowRef(null);
var T = ref(null);
var k2 = null;
var N = defineComponent({ name: "Inertia", props: { initialPage: { type: Object, required: true }, initialComponent: { type: Object, required: false }, resolveComponent: { type: Function, required: false }, titleCallback: { type: Function, required: false, default: (e) => e }, onHeadUpdate: { type: Function, required: false, default: () => () => {
} } }, setup({ initialPage: e, initialComponent: o, resolveComponent: n, titleCallback: l, onHeadUpdate: t }) {
  c.value = o ? markRaw(o) : null, b.value = e, T.value = null;
  let p = typeof window > "u";
  return k2 = Q(p, l, t), p || (Oe.init({ initialPage: e, resolveComponent: n, swapComponent: async (a) => {
    c.value = markRaw(a.component), b.value = a.page, T.value = a.preserveState ? T.value : Date.now();
  } }), Oe.on("navigate", () => k2.forceUpdate())), () => {
    if (c.value) {
      c.value.inheritAttrs = !!c.value.inheritAttrs;
      let a = h(c.value, { ...b.value.props, key: T.value });
      return C.value && (c.value.layout = C.value, C.value = null), c.value.layout ? typeof c.value.layout == "function" ? c.value.layout(h, a) : (Array.isArray(c.value.layout) ? c.value.layout : [c.value.layout]).concat(a).reverse().reduce((m, d) => (d.inheritAttrs = !!d.inheritAttrs, h(d, { ...b.value.props }, () => m))) : a;
    }
  };
} });
var w = N;
var $ = { install(e) {
  Oe.form = v, Object.defineProperty(e.config.globalProperties, "$inertia", { get: () => Oe }), Object.defineProperty(e.config.globalProperties, "$page", { get: () => b.value }), Object.defineProperty(e.config.globalProperties, "$headManager", { get: () => k2 }), e.mixin(_);
} };
function J() {
  return b.value;
}
async function E({ id: e = "app", resolve: o, setup: n, title: l, progress: t = {}, page: p, render: a }) {
  let m = typeof window > "u", d = m ? null : document.getElementById(e), h2 = p || JSON.parse(d.dataset.page), r = (f) => Promise.resolve(o(f)).then((g) => g.default || g), i = [], s = await r(h2.component).then((f) => n({ el: d, App: w, props: { initialPage: h2, initialComponent: f, resolveComponent: r, titleCallback: l, onHeadUpdate: m ? (g) => i = g : null }, plugin: $ }));
  if (!m && t && Z(t), m) {
    let f = await a(createSSRApp({ render: () => h("div", { id: e, "data-page": JSON.stringify(h2), innerHTML: s ? a(s) : "" }) }));
    return { head: i, body: f };
  }
}
var G = defineComponent({ props: { title: { type: String, required: false } }, data() {
  return { provider: this.$headManager.createProvider() };
}, beforeUnmount() {
  this.provider.disconnect();
}, methods: { isUnaryTag(e) {
  return ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"].indexOf(e.type) > -1;
}, renderTagStart(e) {
  e.props = e.props || {}, e.props.inertia = e.props["head-key"] !== void 0 ? e.props["head-key"] : "";
  let o = Object.keys(e.props).reduce((n, l) => {
    let t = e.props[l];
    return ["key", "head-key"].includes(l) ? n : t === "" ? n + ` ${l}` : n + ` ${l}="${t}"`;
  }, "");
  return `<${e.type}${o}>`;
}, renderTagChildren(e) {
  return typeof e.children == "string" ? e.children : e.children.reduce((o, n) => o + this.renderTag(n), "");
}, renderTag(e) {
  if (e.type.toString() === "Symbol(Text)")
    return e.children;
  if (e.type.toString() === "Symbol()")
    return "";
  if (e.type.toString() === "Symbol(Comment)")
    return "";
  let o = this.renderTagStart(e);
  return e.children && (o += this.renderTagChildren(e)), this.isUnaryTag(e) || (o += `</${e.type}>`), o;
}, addTitleElement(e) {
  return this.title && !e.find((o) => o.startsWith("<title")) && e.push(`<title inertia>${this.title}</title>`), e;
}, renderNodes(e) {
  return this.addTitleElement(e.flatMap((o) => o.type.toString() === "Symbol(Fragment)" ? o.children : o).map((o) => this.renderTag(o)).filter((o) => o));
} }, render() {
  this.provider.update(this.renderNodes(this.$slots.default ? this.$slots.default() : []));
} });
var X = G;
var oe = defineComponent({ name: "Link", props: { as: { type: String, default: "a" }, data: { type: Object, default: () => ({}) }, href: { type: String, required: true }, method: { type: String, default: "get" }, replace: { type: Boolean, default: false }, preserveScroll: { type: Boolean, default: false }, preserveState: { type: Boolean, default: null }, only: { type: Array, default: () => [] }, headers: { type: Object, default: () => ({}) }, queryStringArrayFormat: { type: String, default: "brackets" } }, setup(e, { slots: o, attrs: n }) {
  return () => {
    let l = e.as.toLowerCase(), t = e.method.toLowerCase(), [p, a] = k(t, e.href || "", e.data, e.queryStringArrayFormat);
    return l === "a" && t !== "get" && console.warn(`Creating POST/PUT/PATCH/DELETE <a> links is discouraged as it causes "Open Link in New Tab/Window" accessibility issues.

Please specify a more appropriate element using the "as" attribute. For example:

<Link href="${p}" method="${t}" as="button">...</Link>`), h(e.as, { ...n, ...l === "a" ? { href: p } : {}, onClick: (m) => {
      ee(m) && (m.preventDefault(), Oe.visit(p, { data: a, method: t, replace: e.replace, preserveScroll: e.preserveScroll, preserveState: e.preserveState ?? t !== "get", only: e.only, headers: e.headers, onCancelToken: n.onCancelToken || (() => ({})), onBefore: n.onBefore || (() => ({})), onStart: n.onStart || (() => ({})), onProgress: n.onProgress || (() => ({})), onFinish: n.onFinish || (() => ({})), onCancel: n.onCancel || (() => ({})), onSuccess: n.onSuccess || (() => ({})), onError: n.onError || (() => ({})) }));
    } }, o);
  };
} });
var ne = oe;
function O(e, o) {
  if (typeof e == "object" && e !== null && e.__rememberable === false)
    return e;
  let n = Oe.restore(o), l = isReactive(e) ? reactive : ref, t = typeof e.__remember == "function" && typeof e.__restore == "function", p = n === void 0 ? e : l(t ? e.__restore(n) : n);
  return watch(p, (a) => {
    Oe.remember((0, import_lodash4.default)(t ? e.__remember() : a), o);
  }, { immediate: true, deep: true }), p;
}
export {
  X as Head,
  ne as Link,
  E as createInertiaApp,
  Oe as router,
  v as useForm,
  J as usePage,
  O as useRemember
};
//# sourceMappingURL=@inertiajs_vue3.js.map
